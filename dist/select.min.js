let _slice=(a,b,c)=>a.slice(b,c),init=a=>_slice(a,0,-1),isArray=Array.isArray,append=(a,b)=>a.concat(b),isString=a=>"string"==typeof a,isNumber=a=>a==a&&"number"==typeof a,isFunction=a=>"function"==typeof a,isObject=a=>"[object Object]"===Object.prototype.toString.call(a),keys=Object.keys,len=a=>a.length,nul=a=>0===len(a),trim=a=>a.trim(),take=(a,b)=>_slice(b,0,a<0?0:a),drop=(a,b)=>_slice(b,a<0?0:a),copy=a=>_slice(a),last=a=>a[len(a)-1],extend=(a,b)=>Object.assign({},a,b),toLower=a=>isString(a)?a.toLowerCase():a,isElem=(a,b)=>b.indexOf(a)> -1,_set=(c,d,e)=>{let a=new Set,f=new Set(d);for(let b of c)f.has(b)===e&&a.add(b);return[...a]},intersect=(a,b)=>_set(a,b,!0),difference=(a,b)=>_set(a,b,!1),isUniq=a=>new Set(a).size===len(a),isSubset=(b,c)=>{let a=new Set(c),d=a.size;for(let e of b)a.add(e);return d===a.size},any=a=>b=>b.some(a),all=a=>b=>b.every(a),map=a=>b=>b.map(a),each=a=>b=>b.forEach(a),filter=a=>b=>b.filter(b=>a(b)),mapKeys=(c,d)=>{let a=Object.create(null);for(let b of d)a[b]=c(b);return a},concat=(...b)=>{let a=[];for(let c of b)for(let d of c)a.push(d);return a},pick=a=>d=>{let b={};for(let c of a)b[c]=d[c];return b},select=a=>b=>map(pick(a))(b),_pick=a=>c=>{let d={};for(let b of a)d[b]=null==c[b]?null:c[b];return d},_select=a=>b=>map(_pick(a))(b),pickTS=a=>c=>{let d={};for(let b of a)d[b[0]]=null==c[b[1]]?null:c[b[1]];return d},pick2=(a,b,c)=>(e,f)=>{let d={};for(let g of a)d[g]=null==e[g]?null:e[g];for(let h of b)d[h]=null==f[h]?null:f[h];return c&&c(d,e,f),d},pick2KTS=(a,b,c)=>(e,f)=>{let d={};for(let g of a)d[g]=null==e[g]?null:e[g];for(let h of b)d[h[0]]=null==f[h[1]]?null:f[h[1]];return c&&c(d,e,f),d},pick2TSK=(a,b,c)=>(e,f)=>{let d={};for(let g of a)d[g[0]]=null==e[g[1]]?null:e[g[1]];for(let h of b)d[h]=null==f[h]?null:f[h];return c&&c(d,e,f),d},pick2TS=(a,b,c)=>(e,f)=>{let d={};for(let g of a)d[g[0]]=null==e[g[1]]?null:e[g[1]];for(let h of b)d[h[0]]=null==f[h[1]]?null:f[h[1]];return c&&c(d,e,f),d},equalBy=a=>(b,c)=>a(b)===a(c),_nubSorted=(c,f)=>{let e=len(c);if(!e)return[];let a=[],b=0,d=a[len(a)]=c[b++];for(;b<e;)d=f(d,c[b])?d:a[len(a)]=c[b],b++;return a},nubSBy=(a,b)=>_nubSorted(b,a),cmp_nul=(a,b,c)=>a===b?0:null==a?-1:null==b?1:c(a,b),cmp2=(a,b)=>a<b?-1:1,cmp3=(a,b)=>a.localeCompare(b),ascn=a=>(b,c)=>cmp_nul(a(b),a(c),cmp2),descn=a=>(b,c)=>-cmp_nul(a(b),a(c),cmp2),ascn_loc=a=>(b,c)=>cmp_nul(b=a(b),a(c),isString(b)?cmp3:cmp2),descn_loc=a=>(b,c)=>-cmp_nul(b=a(b),a(c),isString(b)?cmp3:cmp2);class SqlSelectError extends Error{}let _throw=a=>{throw new SqlSelectError(a)},_prodSQL=({fn:h,t1:b,t2:c})=>{let d=len(b),e=len(c),f=Array(d*e),i=0,g=-1,a;for(;++g<d;)for(a=-1;++a<e;)f[i++]=h(b[g],c[a]);return f},buildHash=(e,f,b)=>{let a,d;for(let c of e)null!=(a=c[f])&&(b.has(a)?isArray(d=b.get(a))?d.push(c):b.set(a,[d,c]):b.set(a,c))},_hashjoin=(c,o,i,p,j,k,e,q,r)=>{let f=new Map;buildHash(i,j,f);let b=[],g,l,m,a,h;for(let d of(k&&(m=mapKeys(_=>null,r)),e&&(l=mapKeys(_=>null,q),h=new Set),o)){if(a=d[p],!f.has(a)){k&&b.push(c(d,m));continue}if(e&&h.add(a),!isArray(g=f.get(a))){b.push(c(d,g));continue}for(let s of g)b.push(c(d,s))}if(e)for(let n of i)a=n[j],h.has(a)||b.push(c(l,n));return b},cmp=a=>(d,e)=>{let f=len(a),b=0,c=0;for(;0===b&&c<f;)b=a[c++](d,e);return b},_eqs=a=>(d,e)=>{let f=len(a),b=!0,c=0;for(;b&&c<f;)b=a[c++](d,e);return b},_flip=a=>(b,c)=>a(c,b),flip=({fn:c,t1:a,t2:b,str1:d,str2:e,tgs1:f,tgs2:g},h,i)=>len(a)>=len(b)?_hashjoin(c,a,b,d,e,h,i,f,g):_hashjoin(_flip(c),b,a,e,d,i,h,g,f),hashjoin=a=>flip(a,!1,!1),leftjoin=a=>flip(a,!0,!1),rightjoin=a=>flip(a,!1,!0),fulljoin=a=>flip(a,!0,!0),checkSub=(d,e,h,a,f)=>{if(!isSubset(d,e)){let g=difference(d,e),b=intersect(g,h),c=len(b)?b[0]:g[0];isObject(a)?a=`SELECT ${a.ind}`:isArray(a)&&(a=`SELECT ${map(fnToAlias)(a).indexOf(c)+1}`),len(b)&&_throw(`column ${c} (${a}) ambiguous${f||""}`),_throw(`column ${c} (${a}) does not exist${f||""}`)}},stringCheck=(a,b)=>{isString(a)&&a||_throw(`string expected (${b})`)},strColsCheck=(a,b)=>{for(let c of(nul(a)&&_throw(`string expected (${b})`),a))stringCheck(c,b)},checkStr=(a,b)=>{"*"===a&&_throw(`asterisk (${b})`),isElem(".",a)&&_throw(`${a}: point character (${b})`),parseInt(a)+""===a&&_throw(`${a}: all digits (${b})`),(!col(a)||({})[a])&&_throw(`${a}: invalid name (${b})`)},strNulCheck=(b,a)=>{nul(b)&&(isArray(a)&&(a=`SELECT ${a.indexOf(b)+1}`),_throw(`empty string (${a})`))},checkColumnStr=(a,b)=>{strNulCheck(a,b),trim(a)!==a&&_throw(`${trim(a)}: leading/trailing space (${b})`),checkStr(a,b)},pgFn=a=>!(0===a||2===a||4===a),checkOrder=(g,h,e)=>{let b=[],f=g.columns,i=len(f),c=0,d=!1,a,j;for(;c<i;)a=f[c],d?isObject(a)?(h(j=a.ord_ind)&&_throw(`invalid option in ${e}`),d=!1):b.push(a):isString(a)?(b.push(a),d=!0):_throw(`invalid parameters (${e})`),c++;return b},order_fns=[a=>ascn(b=>b[a]),a=>descn(b=>b[a]),a=>ascn(b=>toLower(b[a])),a=>descn(b=>toLower(b[a])),a=>ascn_loc(b=>b[a]),a=>descn_loc(b=>b[a]),],orderbyFn=(i,c)=>{if(c&&nul(c))return[];let e=i.columns,b=[],f=len(e),a=0,d,h,g;for(;a<f;)d=e[a],g=!0,a+1<f&&(isObject(h=e[a+1])?(b.push(order_fns[h.ord_ind](d)),g=!1,a++):b.push(order_fns[0](d))),a++;return a===f&&g&&b.push(order_fns[0](d)),c?c.sort(cmp(b)):b},partitionFn=(d,b,c)=>{let a=orderbyFn(d),e=_eqs(map(a=>(b,c)=>0===a(b,c))(a));b&&(a=append(a,orderbyFn(b)));let f=cmp(a);return c.sort(f),_section(e,c)},checkProp=a=>(isString(a)?a=trim(a):isObject(a)&&(a.nested=!0),a),_AS=a=>last(a)&&last(a).alias?last(a):null,_err=(a,b,c)=>b<a?"more args expected":b>a?"too many args":c,svc=":",_take=a=>_slice(a,1,-1),col=a=>!(":"===a[0]&&":"===a[len(a)-1]),scalarFn=a=>c=>{let d=a.nested?a.props:init(a.props),e=map(a=>isString(a)&&col(a)||isSymbol(a)?c[a]:isNumber(a)?a:isString(a)?_take(a):scalarFn(a)(c))(d),b=a.fn(...e);return a.nested?b:c[last(a.props).alias_str]=b},isSymbol=a=>"symbol"==typeof a,aFn=a=>isString(a)||isSymbol(a)?b=>b[a]:scalarFn(a),_count=(e,b,a,c)=>{if("*"===b)return c;let f=aFn(b),g=a+c,d=0;for(;a<g;)null!=f(e[a++])&&d++;return d},_sum=(e,f,a,g)=>{let h=aFn(f),i=a+g,b=0,c=0,d;for(;a<i;)null!=(d=h(e[a++]))&&(b+=d,c++);return c?b:null},_avg=(e,f,a,g)=>{let h=aFn(f),i=a+g,c=0,b=0,d;for(;a<i;)null!=(d=h(e[a++]))&&(c+=d,b++);return b?c/b:null},_min=(a,b)=>null!=a&&null!=b?b<a?b:a:null==a?b:a,_max=(a,b)=>null!=a&&null!=b?b>a?b:a:null==a?b:a,minmax=(b,f,a,e,g)=>{let c=aFn(f);if(1===e)return c(b[a]);let h=a+e,d=c(b[a++]);for(;a<h;)d=g(c(b[a++]),d);return d},uniq=(f,c,b,g)=>{let d=[],e=new Set,h=b+g,a;for(;b<h;)a=f[b++],e.has(c(a))||(e.add(c(a)),d.push(a));return d},aggr=(a,e,b)=>{let c=1,d=_AS(a);d&&c++;let f=_err(c,len(a),null),g=checkProp(a[0]),h="boolean"==typeof b&&b,i=(c,f,h,i)=>{let a=e(f,g,h,i,b);return d?c[d.alias_str]=a:a},j=(b,a,c,d)=>(a=uniq(a,aFn(g),c,d),i(b,a,0,len(a)));return{aggregate:!0,aggr:!0,prop:g,AS:d,isFn:!0,err:f,count:e===_count,fn:h?j:i}},_section=(f,c)=>{let d=len(c),e=[],g=0,b=0,a;for(;b<d;){for(a=b+1;a<d&&f(c[b],c[a]);)a++;e[g++]=a-b,b=a}return e},_math=(b,f)=>{let d=len(b);if(!d)return 0;let c=0,a=b[c++];if(null==a)return null;let e;for(;c<d;){if(null==(e=b[c++]))return null;a=f(a,e)}return a},add=(...a)=>_math(a,(a,b)=>a+b),sub=(...a)=>_math(a,(a,b)=>a-b),mul=(...a)=>_math(a,(a,b)=>a*b),div=(...a)=>_math(a,(a,b)=>a/b),scalar=(b,a)=>({scalar:!0,fn:b,props:a=map(checkProp)(a),isFn:!0}),_len=a=>null==a[0]?null:a[0].length,_round=a=>null==a[0]?null:Math.round(a[0]),checkAliasString=(a,b)=>(isString(a)&&(a=trim(a)),stringCheck(a,`SELECT ${b} AS`),checkStr(a,`SELECT ${b} AS`),a),checkScalarAliases=c=>{let a=c.props;if(!nul(a)&&last(a).alias){let b=last(a).alias_str;return b=checkAliasString(b,c.ind),last(a).alias_str=b,b}_throw(`AS expected (SELECT ${c.ind})`)},checkAggregateAliases=a=>{if(a.AS&&a.AS.alias){let b=a.AS.alias_str;return b=checkAliasString(b,a.ind),a.AS.alias_str=b,b}_throw(`AS expected (SELECT ${a.ind})`)},_isAggr=a=>any(a=>isObject(a)&&(a.aggr||a.scalar&&_isAggr(a.props)))(a),isAggr=(a,b)=>any(a=>isString(a)&&isElem(a,b)||isObject(a)&&(a.aggr||a.scalar&&isAggr(a.props,b)))(a),checkScalar=(a,b,c)=>{let d=init(a.props);if(isAggr(d,b)){a.aggr=!0,b.push(c);return}a.scal=!0},checkAliases=d=>{let c=[],a;for(let b of d)b.scalar?(a=checkScalarAliases(b),checkScalar(b,c,a)):(a=checkAggregateAliases(b),c.push(a));return c},checkParams=(c,b)=>{for(let a of(nul(c)&&_throw(`parameters expected (SELECT ${b})`),c))(isString(a)?!nul(a):isObject(a)?a.isFn:isNumber(a))||(isObject(a)&&a.alias&&_throw(`nested AS (SELECT ${b})`),_throw(`invalid parameter (SELECT ${b})`))},_checkProp=(a,b)=>{(isString(a)?nul(a):!(isObject(a)&&a.isFn))&&_throw(`invalid parameter (SELECT ${b})`)},checkAggregateFn=(a,b)=>{a.nested&&a.AS&&_throw(`nested AS (SELECT ${b})`),a.err&&_throw(`${a.err} (SELECT ${b})`),_checkProp(a.prop,b)},isNested=(a,b,c)=>a&&isElem(b,c),scalInd=0,startInd=1,restInd=2,checkNesting=(a,b,h,i,c,f)=>{let g=[[],[],[]];if(a.aggregate){0===b&&_throw(`nesting error (SELECT ${c})`),b=a.aggr?0:2,checkAggregateFn(a,c);let d=a.prop;if(isString(d)&&!(a.count&&"*"===d))isNested(a.aggr,d,f)&&_throw(`nesting error (SELECT ${c+" "+d})`),g[b].push(d);else if(isObject(d)){let k=checkNesting(d,b,h,i,c,f);each((a,b)=>g[b].push(...a))(k)}}else{let j=a.nested?a.props:init(a.props);for(let e of(checkParams(j,c),j))if(isString(e)&&col(e))f&&1!==b&&isNested(0===b,e,f)&&_throw(`nesting error (SELECT ${c+" "+e})`),g[b].push(e);else if(isObject(e)){let l=checkNesting(e,b,h,i,c,f);each((a,b)=>g[b].push(...a))(l)}}return g},aliasFn=a=>(a.aggregate?a.AS:last(a.props)).alias_str,checkScal=(h,d,e)=>{let f=[],g=[],b,c;for(let a of h)c=checkNesting(a,0,null,e,a.ind,null),checkSub(c[0],d,e,a),b=aliasFn(a),d.push(b),g.push(b),f.push(...c[0]);return{scal_names:f,sa:g}},checkAggr=(h,d,e,f,i)=>{let g=[],c=[],a;for(let b of h)a=checkNesting(b,1,d,e,b.ind,i),checkSub(a[0],d,e,b),checkSub(a[1],append(c,f),[],b),c.push(aliasFn(b)),g.push(...a[0],...a[1]);return{aggr_names:g,aa:c,input:append(f,c)}},checkOrderBy=(d,e,f,c,g)=>{let a=`${g?"SELECT":"ORDER_BY"}${c?" "+c:""}`,b=checkOrder(d,a=>a<0||a>5,a);return strColsCheck(b,a),checkSub(b,e,f,a),b},executeScalars=(a,b)=>{let c=map(scalarFn)(b);for(let d of a)for(let e of c)e(d)},whereFn=(a,b)=>filter(a.pred)(b),groupbyFn=(b,a)=>nul(a)?[]:partitionFn(b,null,a),scalarAggrFn=(a,c,f,g,h)=>{let d=a.nested?a.props:init(a.props),e=map(a=>isString(a)&&col(a)?c[a]:isNumber(a)?a:isString(a)?_take(a):a.aggregate?a.fn(c,f,g,h):scalarAggrFn(a,c,f,g,h))(d),b=a.fn(...e);return a.nested?b:c[last(a.props).alias_str]=b},_scalarAggrFn=a=>(b,c,d,e)=>scalarAggrFn(a,b,c,d,e),executeAggregates=(d,h,e)=>{let a=len(d),b=Array(a),c=-1;for(;++c<a;)b[c]={};let f=c=>{let i=isString(c)?(a,b,d)=>a[c]=b[d][c]:c.aggregate?c.fn.bind(c):_scalarAggrFn(c),g=0,e=-1,f;for(;++e<a;)f=d[e],i(b[e],h,g,f),g+=f};for(let g of e)f(g);return b},fnToAlias=a=>isString(a)?a:aliasFn(a),getDistinct=(a,b)=>{let c=cmp(map(a=>ascn(b=>b[a]))(a)),d=_eqs(map(a=>equalBy(b=>b[a]))(a));return b.sort(c),nubSBy(d,b)},checkStr1=(b,a,c)=>{a&&b[a]&&!isString(b[a])&&_throw(`Column ${a} (FROM ${c}) ambiguous!`)},mergeObjs=(e,f,j,k,l,m,a,n)=>{let h=e[j],b=e[k],c={};if(m)h[e[a]]=a,b[a]||(b[a]=e[a]),h[f[a]]=a,delete f[a];else for(let o of keys(b))b[o]=1;checkStr1(b,a,n);let d;for(let g of keys(e))d=e[g],f[g]&&!h[d]?(c[d]=g,b[g]=d):c[g]=d;for(let i of keys(f))d=f[i],b[i]?c[d]=i:c[i]=d;return c[j]=h,c[k]=b,c[l]=e[l],c},checkCrossJoin=(a,c,d,e,b)=>a[b]||c[b]?(a[b]=!0,a):mergeObjs(a,c,d,e,b),checkJoin=(a,c,b,f,g,h,i,j,k,d)=>{if(a[d]||c[d])return a[d]=!0,a;let e=i?"USING ":"ON ";return stringCheck(b,`FROM ${e+g}`),stringCheck(f,`FROM ${e+h}`),a[b]||a[j][b]||checkSub([b],keys(a),keys(a[k]),`FROM ${e+g}`),c[f]||checkSub([f],keys(c),[],`FROM ${e+h}`),mergeObjs(a,c,j,k,d,i,b,g)},checkTNUniqness=b=>{if(!isUniq(b)){let c=new Set,d,e=0;for(let a of b){if(c.has(a)){d=a;break}c.add(a),e++}_throw(`table name ${d} (FROM ${"table "+e+"1"}) already exists`)}},checkNext=(g,d,b,c,h)=>{let e=c+1,a="t"+(len(b)+1),f;if(e<h&&isString(f=g[e])&&(a=trim(f),strNulCheck(a,"FROM table-name"),c++),b.push(a),checkTNUniqness(b),!nul(d))for(let i of keys(d[0]))checkColumnStr(i,a+" column");return c},copyObj=a=>Object.assign({},a),_throwErr=(d,e,c)=>{let a="FROM: ",b=`after ${e} `;d&&(isArray(c)&&_throw(a+b+"ON/USING expected"),_throw(a+"after JOIN "+b+"table expected")),_throw(a+(isArray(c)?"":"after ON/USING ")+b+"table or JOIN expected")},checkJoinTables=h=>{let n=len(h),k=[],o=[],l=[],g=Symbol(),m=Symbol(),i=Symbol(),q=(b,a)=>mapKeys(a=>b+a,keys(a[0]||{})),e=0,r=0,p="",c,a,j,f,d,b=h[e];for(isArray(b)||_throw("FROM: table expected as first parameter"),e=checkNext(h,b,k,e,n),d=k[r++],a=q(d+".",b),o.push(copyObj(a)),a[g]={},a[m]={},a[i]=nul(b),l.push([null,extend(a,a[g])]),f=b,e++;e<n;)isArray(b=h[e])?(c&&isArray(f)&&_throwErr(c,d,f),e=checkNext(h,b,k,e,n),p+=(p?" + ":"")+d,j=q((d=k[r++])+".",b),o.push(copyObj(j)),j[i]=nul(b),(!c||c.cross)&&(a=checkCrossJoin(a,j,g,m,i),l.push([null,extend(a,a[g])]),c=null)):isObject(b)&&(b.join||b.ON)?b.join?(c&&_throwErr(c,d,f),c=b):(c&&isArray(f)||_throwErr(c,d,f),a=checkJoin(a,j,b.str1,b.str2,p,d,b.using,g,m,i),l.push([b.str1,extend(a,a[g])]),c=null):_throwErr(c,d,f),f=b,e++;c&&_throwErr(c,d,f);let s=keys(extend(a,a[g]));return{empty:a[i],tres:keys(a),tkeys:s,ambs:keys(a[m]),inputs:o,temps:l}},zip=(a,b)=>a.map((a,c)=>[a,b[c]]),pick2Fns=(a,b,c)=>a.simple&&b.simple?pick2(a.targets,b.targets,c):a.simple?pick2KTS(a.targets,zip(b.targets,b.sources),c):b.simple?pick2TSK(zip(a.targets,a.sources),b.targets,c):pick2TS(zip(a.targets,a.sources),zip(b.targets,b.sources),c),invert=a=>{let b={};for(let c of keys(a))b[a[c]]=c;return b},joinFn=(e,d,f,a,b)=>{if(b>len(a)-1)return{table:d};let g=a[b][1],n=invert(e),o=invert(g),h=map(a=>a[0])(drop(b,a)),i=_uniq(append(f,h)),j=a=>e[a]&&e[a]===g[a]||a===e[g[a]]||n[a]&&o[a],k=filter(j)(i),c=map(a=>g[a]?a:o[a])(k),l=map(a=>e[a]&&g[a]?a:g[a])(c),m=all((a,b)=>a===l[b])(c);return{targets:c,sources:l,simple:m,table:d}},executeJoin=(b,c,f,i,a,j,k,g,h)=>{let l=g[h][1],e;if(a.semi){let d=a.left?b:c;e=d.simple?_pick(d.targets):pickTS(zip(d.targets,d.sources))}else e=pick2Fns(b,c,j&&a.fnplus?a.fnplus(f):null);let m=a.fn({fn:e,t1:b.table,t2:c.table,str1:f,str2:i,tgs1:b.targets,tgs2:c.targets});return joinFn(l,m,k,g,h+1)},checkNextInd=(b,a,c)=>a+1<c&&isString(b[a+1])?a+1:a,_uniq=a=>[...new Set(a)],joinTables=(f,g,i,h)=>{let j=len(f),b=0,k=0,c=1,a=f[0],d,e,l;if(1===len(h))return _select(intersect(keys(i[k]),g))(a);for(b=checkNextInd(f,b,j),e=joinFn(i[k++],a,g,h,c),b++;b<j;)isArray(a=f[b])?(b=checkNextInd(f,b,j),l=joinFn(i[k++],a,g,h,c,!1),(!d||d.cross)&&(e=executeJoin(e,l,null,null,{fn:_prodSQL},!1,g,h,c),d=null,c++)):a.join?d=a:(e=executeJoin(e,l,a.str1,a.str2,d,a.using,g,h,c),d=null,c++),b++;return e.table},checkGroupBy=(c,d,e,f,g,h)=>{let b="GROUP_BY",a=checkOrder(c,pgFn,b);return strColsCheck(a,b),checkSub(a,f,g,b),checkSub(append(d,e),a,[],h," in GROUP_BY"),a},checkWhere=(d,g,h,a)=>{isFunction(d.pred)||_throw(`predicate expected (${a})`);let c=d.pred+"",i=c.match(/[=(]/)[0],e=c.match("="===i?/\b\w+\b/:/(?<=\(\s*)\b\w+\b/);e||_throw(`parameter expected in predicate of ${a}`);let f="(?<=\\b"+e[0]+"\\s*",j=f+"\\.\\s*)\\w+\\b",k="\\[\\s*['\"`])",l="(?=['\"`]\\s*\\])",m=f+k+"[^'\"`]*"+l,b=c.match(new RegExp(j+"|"+m,"g"))||[];for(let n of b=trimCols(b))strNulCheck(n,a);return checkSub(b,g,h,a),b},checkUniqness=c=>{let d=map(fnToAlias)(c);if(!isUniq(d)){let e=new Set,f,a=0;for(let b of d){if(e.has(b)){f=b;break}e.add(b),a++}_throw(`column ${f} (SELECT ${a+1}${isString(c[a])?"":" AS"}) already exists`)}},checkNotSub=(b,e)=>{let c=filter(a=>!isString(a))(e),f=map(fnToAlias)(c);if(!nul(intersect(f,b))){let g=new Set(b),a;for(let d of c)if(g.has(fnToAlias(d))){a=d;break}_throw(`column ${fnToAlias(a)} (SELECT ${a.ind} AS) already exists [in table]`)}},checkSelects=(b,c,d,a,e)=>{if(e)for(let f of b)strNulCheck(f,a);checkUniqness(a),checkNotSub(append(c,d),a),e&&checkSub(b,c,d,a)},_selectSQL=(q,P,Q,R)=>{let f=q.findIndex(a=>!(isString(a)||a.isFn));f<1&&(f> -1&&_throw("no column selected"),f=len(q));let k=take(f,q),S=drop(f,q),v=-1,b,w,l,c,g,m;for(let h of S)(b=h.select_ind)<v&&_throw("SELECT clauses: wrong order"),b===v&&_throw("SELECT clauses: duplicates"),0===b?w=h:1===b?l=h:2===b?c=h:3===b?g=h:4===b?m=h:_throw("SELECT clauses: invalid clause"),v=b;w||_throw("FROM must be supplied");let D=w.tables,x,y=1,E=[];for(let n of k)isString(n)||(isObject(n)&&n.isFn||_throw(`invalid argument (SELECT ${y})`),n.ind=y,x=!0,E.push(n)),y++;let F;x&&(F=checkAliases(E));let r,s,t,d=[],z=[],A=[];for(let o of k)isString(o)?(r=!0,d.push(trim(o))):o.scal?(s=!0,z.push(o)):(t=!0,A.push(o));let u;1===f&&r&&"*"===d[0]&&(u=!0),(r||s)&&t&&!c&&_throw("GROUP_BY required"),g&&!c&&_throw("GROUP_BY required [before HAVING]");let{empty:T,tres:G,tkeys:H,ambs:i,inputs:U,temps:V}=checkJoinTables(D);if(T)return[];u||checkSelects(d,H,i,k,r);let e=copy(H),I=[],B=[],J=[],C=[],K=[],L=[],p=[],M=[];l&&(I=checkWhere(l,e,i,"WHERE")),s&&({scal_names:K,sa:p}=checkScal(z,e,i)),u&&(d=G);let j=c||t;if(j){if(c){let W=u?G:k;B=checkGroupBy(c,d,p,e,i,W)}({aggr_names:L,aa:M,input:e}=checkAggr(A,e,i,B,F)),g&&(J=checkWhere(g,e,[],"HAVING"))}m&&(C=checkOrderBy(m,e,j?[]:i));let X=concat(d,K,L,B,I,j?[]:C),Y=j?append(p,M):p,Z=difference(X,Y),a=joinTables(D,Z,U,V);if(l&&(a=whereFn(l,a)),s&&executeScalars(a,z),j){let N=concat(d,p,J,C),$=t?concat(N,A):N,aa=c?groupbyFn(c,a):[len(a)];a=executeAggregates(aa,a,$),g&&(a=whereFn(g,a))}let O=x?map(fnToAlias)(k):d;return j||!P||nul(a)||(a=getDistinct(O,a)),m&&orderbyFn(m,a),Q&&(a=take(R,a)),select(O)(a)},trimCols=a=>map(a=>isString(a)?trim(a):a)(a),fulljoinFn=a=>(c,d,b)=>{null==d[a]&&(c[a]=null==b[a]?null:b[a])},rightjoinFn=a=>(c,_,b)=>{c[a]=null==b[a]?null:b[a]};export const JOIN={join:!0,fn:hashjoin};export const INNER_JOIN={join:!0,fn:hashjoin};export const CROSS_JOIN={join:!0,cross:!0};export const LEFT_JOIN={join:!0,fn:leftjoin};export const RIGHT_JOIN={join:!0,fn:rightjoin,fnplus:rightjoinFn};export const FULL_JOIN={join:!0,fn:fulljoin,fnplus:fulljoinFn};export const ON=(a,b)=>(isString(a)&&(a=trim(a)),isString(b)&&(b=trim(b)),{ON:!0,str1:a,str2:b});export const USING=a=>(isString(a)&&(a=trim(a)),{ON:!0,str1:a,str2:a,using:!0});export const COUNT=(...a)=>aggr(a,_count,!1);export const SUM=(...a)=>aggr(a,_sum,!1);export const AVG=(...a)=>aggr(a,_avg,!1);export const MIN=(...a)=>aggr(a,minmax,_min);export const MAX=(...a)=>aggr(a,minmax,_max);export const COUNT_DISTINCT=(...a)=>aggr(a,_count,!0);export const SUM_DISTINCT=(...a)=>aggr(a,_sum,!0);export const AVG_DISTINCT=(...a)=>aggr(a,_avg,!0);export const AS=a=>({alias:!0,alias_str:a});export const ID=(...a)=>scalar(a=>a,a);export const LEN=(...a)=>scalar(_len,a);export const ROUND=(...a)=>scalar(_round,a);export const ADD=(...a)=>scalar(add,a);export const SUB=(...a)=>scalar(sub,a);export const DIV=(...a)=>scalar(div,a);export const MUL=(...a)=>scalar(mul,a);export const FROM=(...a)=>({tables:a,select_ind:0});export const WHERE=a=>({pred:a,select_ind:1});export const GROUP_BY=(...a)=>(a=trimCols(a),{columns:a,select_ind:2});export const HAVING=a=>({pred:a,select_ind:3});export const ASC={ord_ind:0};export const DESC={ord_ind:1};export const NOCASE_ASC={ord_ind:2};export const NOCASE_DESC={ord_ind:3};export const ASC_LOC={ord_ind:4};export const DESC_LOC={ord_ind:5};export const ORDER_BY=(...a)=>(a=trimCols(a),{columns:a,select_ind:4});export const SELECT=(...a)=>_selectSQL(a);export const SELECT_TOP=a=>(...b)=>_selectSQL(b,!1,!0,a);export const SELECT_DISTINCT=(...a)=>_selectSQL(a,!0);export const SELECT_DISTINCT_TOP=a=>(...b)=>_selectSQL(b,!0,!0,a);export const createFn=a=>(...b)=>scalar(a,b)