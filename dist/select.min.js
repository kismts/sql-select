let _slice=(a,b,c)=>a.slice(b,c),init=a=>_slice(a,0,-1),isArray=Array.isArray,append=(a,b)=>a.concat(b),isString=a=>"string"==typeof a,isNumber=a=>a==a&&"number"==typeof a,isFunction=a=>"function"==typeof a,isObject=a=>"[object Object]"===Object.prototype.toString.call(a),keys=Object.keys,len=a=>a.length,nul=a=>0===len(a),trim=a=>a.trim(),take=(a,b)=>_slice(b,0,a<0?0:a),drop=(a,b)=>_slice(b,a<0?0:a),copy=a=>_slice(a),last=a=>a[len(a)-1],extend=(a,b)=>Object.assign({},a,b),toLower=a=>isString(a)?a.toLowerCase():a,floor=Math.floor,ceil=Math.ceil,minFn=(a,b)=>b<a?b:a,maxFn=(a,b)=>b>a?b:a,isElem=(a,b)=>b.indexOf(a)> -1,_set=(c,d,e)=>{let a=new Set,f=new Set(d);for(let b of c)f.has(b)===e&&a.add(b);return[...a]},intersect=(a,b)=>_set(a,b,!0),difference=(a,b)=>_set(a,b,!1),isUniq=a=>new Set(a).size===len(a),isSubset=(b,c)=>{let a=new Set(c),d=a.size;for(let e of b)a.add(e);return d===a.size},any=a=>b=>b.some(a),all=a=>b=>b.every(a),map=a=>b=>b.map(a),each=a=>b=>b.forEach(a),filter=a=>b=>b.filter(b=>a(b)),mapKeys=(c,d)=>{let a=Object.create(null);for(let b of d)a[b]=c(b);return a},concat=(...b)=>{let a=[];for(let c of b)for(let d of c)a.push(d);return a},pick=a=>d=>{let b={};for(let c of a)b[c]=d[c];return b},select=a=>b=>map(pick(a))(b),_pick=a=>c=>{let d={};for(let b of a)d[b]=null==c[b]?null:c[b];return d},_select=a=>b=>map(_pick(a))(b),pickTS=a=>c=>{let d={};for(let b of a)d[b[0]]=null==c[b[1]]?null:c[b[1]];return d},pick2=(a,b,c)=>(e,f)=>{let d={};for(let g of a)d[g]=null==e[g]?null:e[g];for(let h of b)d[h]=null==f[h]?null:f[h];return c&&c(d,e,f),d},pick2KTS=(a,b,c)=>(e,f)=>{let d={};for(let g of a)d[g]=null==e[g]?null:e[g];for(let h of b)d[h[0]]=null==f[h[1]]?null:f[h[1]];return c&&c(d,e,f),d},pick2TSK=(a,b,c)=>(e,f)=>{let d={};for(let g of a)d[g[0]]=null==e[g[1]]?null:e[g[1]];for(let h of b)d[h]=null==f[h]?null:f[h];return c&&c(d,e,f),d},pick2TS=(a,b,c)=>(e,f)=>{let d={};for(let g of a)d[g[0]]=null==e[g[1]]?null:e[g[1]];for(let h of b)d[h[0]]=null==f[h[1]]?null:f[h[1]];return c&&c(d,e,f),d},equalBy=a=>(b,c)=>a(b)===a(c),_nubSorted=(c,f)=>{let e=len(c);if(!e)return[];let a=[],b=0,d=a[len(a)]=c[b++];for(;b<e;)d=f(d,c[b])?d:a[len(a)]=c[b],b++;return a},nubSBy=(a,b)=>_nubSorted(b,a),cmp_nul=(a,b,c)=>a===b?0:null==a?-1:null==b?1:c(a,b),cmp2=(a,b)=>a<b?-1:1,cmp3=(a,b)=>a.localeCompare(b),ascn=a=>(b,c)=>cmp_nul(a(b),a(c),cmp2),descn=a=>(b,c)=>-cmp_nul(a(b),a(c),cmp2),ascn_loc=a=>(b,c)=>cmp_nul(b=a(b),a(c),isString(b)?cmp3:cmp2),descn_loc=a=>(b,c)=>-cmp_nul(b=a(b),a(c),isString(b)?cmp3:cmp2);class Node{constructor(a,b){this.color=a,this.value=b,this.left=null,this.right=null}}let RED=!0,BLACK=!1;class Tree{constructor(){this.root=null,this.compare=(a,b)=>a<b?-1:a>b?1:0,this.map={}}isRed(a){return null!=a&& !0===a.color}isBlack(a){return null!=a&& !1===a.color}rotateLeft(a){let b=a.right;return a.right=b.left,b.left=a,b.color=a.color,a.color=!0,b}rotateRight(a){let b=a.left;return a.left=b.right,b.right=a,b.color=a.color,a.color=!0,b}colorFlip(a){a.color=!a.color,a.left.color=!a.left.color,a.right.color=!a.right.color}max(a){for(;null!=a.right;)a=a.right;return a}min(a){for(;null!=a.left;)a=a.left;return a}get maxValue(){return null!=this.root?this.max(this.root).value:null}get minValue(){return null!=this.root?this.min(this.root).value:null}moveRedLeft(a){return this.colorFlip(a),this.isRed(a.right.left)&&(a.right=this.rotateRight(a.right),a=this.rotateLeft(a),this.colorFlip(a)),a}moveRedRight(a){return this.colorFlip(a),this.isRed(a.left.left)&&(a=this.rotateRight(a),this.colorFlip(a)),a}fixUp(a){return this.isRed(a.right)&&(a=this.rotateLeft(a)),this.isRed(a.left)&&this.isRed(a.left.left)&&(a=this.rotateRight(a)),this.isRed(a.left)&&this.isRed(a.right)&&this.colorFlip(a),a}deleteMin(a){return null==a.left?null:(this.isBlack(a.left)&&!this.isRed(a.left.left)&&(a=this.moveRedLeft(a)),a.left=this.deleteMin(a.left),this.fixUp(a))}_insert(a,b){if(null==a)return new Node(!0,b);let c=this.compare(b,a.value);return c<0?a.left=this._insert(a.left,b):c>0?a.right=this._insert(a.right,b):a.value=b,this.fixUp(a)}_delete(a,b){if(null==a)return null;let c=this.compare(b,a.value);if(c<0)this.isBlack(a.left)&&!this.isRed(a.left.left)&&(a=this.moveRedLeft(a)),a.left=this._delete(a.left,b);else{if(this.isRed(a.left)&&(a=this.rotateRight(a)),0===c&&null==a.right)return null;this.isBlack(a.right)&&!this.isRed(a.right.left)&&(a=this.moveRedRight(a)),0===(c=this.compare(b,a.value))?(a.value=this.min(a.right).value,a.right=this.deleteMin(a.right)):a.right=this._delete(a.right,b)}return this.fixUp(a)}insert(a){this.map[a]=(this.map[a]||0)+1,1===this.map[a]&&(this.root=this._insert(this.root,a),this.root.color=!1)}remove(a){1===this.map[a]?(this.map[a]=0,this.root=this._delete(this.root,a),null!=this.root&&(this.root.color=!1)):this.map[a]--}}class SqlSelectError extends Error{}let _throw=a=>{throw new SqlSelectError(a)},_prodSQL=({fn:h,t1:b,t2:c})=>{let d=len(b),e=len(c),f=Array(d*e),i=0,g=-1,a;for(;++g<d;)for(a=-1;++a<e;)f[i++]=h(b[g],c[a]);return f},buildHash=(e,f,b)=>{let a,d;for(let c of e)null!=(a=c[f])&&(b.has(a)?isArray(d=b.get(a))?d.push(c):b.set(a,[d,c]):b.set(a,c))},_hashjoin=(c,o,i,p,j,k,e,q,r)=>{let f=new Map;buildHash(i,j,f);let b=[],g,l,m,a,h;for(let d of(k&&(m=mapKeys(_=>null,r)),e&&(l=mapKeys(_=>null,q),h=new Set),o)){if(a=d[p],!f.has(a)){k&&b.push(c(d,m));continue}if(e&&h.add(a),!isArray(g=f.get(a))){b.push(c(d,g));continue}for(let s of g)b.push(c(d,s))}if(e)for(let n of i)a=n[j],h.has(a)||b.push(c(l,n));return b},buildSet=(b,c,d)=>{let a;for(let e of b)null!=(a=e[c])&&d.add(a)},_semijoin=(d,g,h,i,j,k)=>{let e=new Set;buildSet(h,j,e);let a=[],b,f;for(let c of g)f=c[i],b=e.has(f),k?b&&a.push(d(c)):b||a.push(d(c));return a},cmp=a=>(d,e)=>{let f=len(a),b=0,c=0;for(;0===b&&c<f;)b=a[c++](d,e);return b},_eqs=a=>(d,e)=>{let f=len(a),b=!0,c=0;for(;b&&c<f;)b=a[c++](d,e);return b},_flip=a=>(b,c)=>a(c,b),flip=({fn:c,t1:a,t2:b,str1:d,str2:e,tgs1:f,tgs2:g},h,i)=>len(a)>=len(b)?_hashjoin(c,a,b,d,e,h,i,f,g):_hashjoin(_flip(c),b,a,e,d,i,h,g,f),hashjoin=a=>flip(a,!1,!1),leftjoin=a=>flip(a,!0,!1),rightjoin=a=>flip(a,!1,!0),fulljoin=a=>flip(a,!0,!0),leftsemijoin=({fn:a,t1:b,t2:c,str1:d,str2:e})=>_semijoin(a,b,c,d,e,!0),rightsemijoin=({fn:a,t1:b,t2:c,str1:d,str2:e})=>_semijoin(a,c,b,e,d,!0),leftantijoin=({fn:a,t1:b,t2:c,str1:d,str2:e})=>_semijoin(a,b,c,d,e),rightantijoin=({fn:a,t1:b,t2:c,str1:d,str2:e})=>_semijoin(a,c,b,e,d),avgFn=(b,c)=>{for(let a=0;a<b.length;a++)b[a][c]=b[a][c]&&b[a][c].count?b[a][c].sum/b[a][c].count:null},sumFn=(b,c,d)=>{for(let a=0;a<b.length;a++)b[a][c]=b[a][c]&&b[a][c].count?b[a][c].sum:d},executeUnordered=(g,a,b,d)=>{let j=len(g),e=0,h=-1,c,i,f;for(a.fromWin=!0;++h<j;){for(c=g[h],i=a.fn(null,b,e,c),f=-1;++f<c;)b[e+f][d]=i;e+=c}a.avg&&avgFn(b,d),a.sum&&sumFn(b,d,null)},exNulls=(c,a,d)=>{let e=c.count?0:null,f=len(a),b=-1;for(;++b<f;)a[b][d]=e},executeRows=(s,c,b,d,z,A,h,i)=>{let B=len(s),C=h<=0,D=i<=0,n=c.min,t=c.max,o=c.count?0:null,u=-1,e=0,v=-1,m,j,p,f,k,a,g,q,l,w,r,x,y;for(c.fromWin=!0;++v<B;){for(j=(p=e+(m=s[v]))-1,q=!1,r=!0,k=0;k<m;){if(a=e+k,z&&a+h<e)g=a+i,D?(f=g<e?o:c.fn(null,b,g,1),b[a][d]=g>e?c.fnP(b[a-1][d],f):f):g<p?(f=a===e?c.fn(null,b,e,1+i):c.fn(null,b,g,1),b[a][d]=a>e?c.fnP(b[a-1][d],f):f):b[a][d]=a>e?b[a-1][d]:c.fn(null,b,a,m);else if(A&&a+i>j){q=!0;break}else r?(r=!1,n||t?(l=new Tree,c.fn(null,b,a+h,1+i-h,l),b[a][d]=n?l.minValue:l.maxValue):b[a][d]=a===e?c.fn(null,b,a+h,1+i-h):c.fnP(b[a-1][d],c.fn(null,b,a+i,1))):n||t?(null!=(x=c.fn(null,b,a+h-1,1))&&l.remove(x),null!=(y=c.fn(null,b,a+i,1))&&l.insert(y),b[a][d]=n?l.minValue:l.maxValue):(w=c.fnM(b[a-1][d],c.fn(null,b,a+h-1,1)),b[a][d]=c.fnP(w,c.fn(null,b,a+i,1)));k++}if(q)for(u=e-1,k=0;k<m&&(a=j-k)+i>j;)g=a+h,C?g>u?(f=c.fn(null,b,g,1-(a===j?h:0)),b[a][d]=a<j?c.fnP(b[a+1][d],f):f):b[a][d]=a<j?b[a+1][d]:c.fn(null,b,e,m):(f=g>j?o:c.fn(null,b,g,1),b[a][d]=g<j?c.fnP(b[a+1][d],f):f),k++;e=p}c.avg&&avgFn(b,d),c.sum&&sumFn(b,d,o)},_bsgt=a=>(c,b)=>c>(null==a(b)?-1/0:a(b)),_bslt=a=>(c,b)=>c<(null==a(b)?-1/0:a(b)),bsLeft=(d,e,a,b,f)=>{let c;for(;a<b;)f(d,e[c=Math.floor(a+(b-a)/2)])?a=c+1:b=c;return a},bsRight=(d,e,a,b,f)=>{let c;for(;a<b;)f(d,e[c=Math.floor(a+(b-a)/2)])?b=c:a=c+1;return b},executeRange=(D,d,a,e,L,M,r,s,n)=>{let N=len(D),u=d.min,E=d.max,w=d.count?0:null,v=a=>a[n],x=d.desc,F=x?_bsgt(v):_bslt(v),G=x?_bslt(v):_bsgt(v),H=r,I=s,J=-1,h=0,K=-1,y,o,k,j,b,z,l,A,i,c,f,g,p,m,q,B,C,t;for(x&&(r=-r,s=-s),d.fromWin=!0;++K<N;){for(o=(k=h+(y=D[K]))-1,z=!1,f=h,c=o,A=!0,j=0;j<y;)if(b=h+j,L&&H=== -1/0){if(0===I){for(c=b,f=b,p=d.fn(null,a,b,1),i=b===h?p:d.fnP(a[b-1][e],p),g=a[b++][n];b<k&&g===a[b][n];)i=d.fnP(i,d.fn(null,a,b,1)),f=b++;for(;c<=f;)a[c++][e]=i;j=b-h}else g=a[b][n],c=f,(f=bsRight(null!=g?g+s:-1/0,a,h,k,F))===h?a[b][e]=w:c<f?(i=d.fn(null,a,c,f-c),a[b][e]=b===h?i:d.fnP(a[b-1][e],i)):a[b][e]=a[b-1][e],j++}else if(M&&I===1/0){z=!0;break}else g=a[b][n],m=c,q=f,c=bsLeft(null!=g?g+r:-1/0,a,h,k,G),(f=bsRight(null!=g?g+s:-1/0,a,h,k,F))===h||c===k||c===f?a[b][e]=w:A||m===q?(A=!1,u||E?(l=new Tree,d.fn(null,a,c,f-c,l),a[b][e]=u?l.minValue:l.maxValue):a[b][e]=d.fn(null,a,c,f-c)):(C=minFn(q,c),t=maxFn(q,c),u||E?(c>m&&d.fn(null,a,m,C-m,l,!0),f>q&&d.fn(null,a,t,f-t,l),a[b][e]=u?l.minValue:l.maxValue):(B=c>m?d.fnM(a[b-1][e],d.fn(null,a,m,C-m)):a[b-1][e],a[b][e]=f>q?d.fnP(B,d.fn(null,a,t,f-t)):B)),j++;if(z)for(J=h-1,j=0;j<y;)if(b=o-j,0===H){for(c=b,f=b,p=d.fn(null,a,b,1),i=b===o?p:d.fnP(a[b+1][e],p),g=a[b--][n];b>J&&g===a[b][n];)i=d.fnP(i,d.fn(null,a,b,1)),c=b--;for(;c<=f;)a[c++][e]=i;j+=f-b}else g=a[b][n],f=c,(c=bsLeft(null!=g?g+r:-1/0,a,h,k,G)-1)===o?a[b][e]=w:c<f?(i=d.fn(null,a,c+1,f-c),a[b][e]=b===o?i:d.fnP(a[b+1][e],i)):a[b][e]=a[b+1][e],j++;h=k}d.avg&&avgFn(a,e),d.sum&&sumFn(a,e,null)},toGroups=(h,m,g,d,n,o,i)=>{let p=len(h),e=0,j=-1,f,b,a,c,k,l;for(;++j<p;){for(f=h[j],l=len(g),b=0;b<f;){for(k=d[a=e+b][i],c=a,a=e+ ++b;b<f&&d[a][i]===k;)a=e+ ++b;n(c,a-c),d[c][o]=a-c,g.push(d[c])}m.push(len(g)-l),e+=f}},fromGroups=(d,e,j,k,l)=>{let m=len(d),b=0,f=-1,c,a,g,h,i;for(;++f<m;){for(c=d[f],a=0;a<c;)for(h=j(g=b+a),i=-1;++i<e[g][k];)e[b+a++][l]=h;b+=c}},avg_fn=a=>(_,f,b,g)=>{let h=b+g,c=0,d=0,e;for(;b<h;)c+=(e=a(f[b++])).sum,d+=e.count;return{sum:c,count:d}},executeGroups=(d,a,e,f,k,l,m,n,o)=>{let c=Symbol(),g=Symbol(),h=a.avg,i=[],j=[],b;return h&&(a.fromWin=!0),b=(b,d)=>e[b][c]=a.fn(null,e,b,d),toGroups(d,j,i,e,b,g,o),a.count?(a=_SUM(c)).count=!0:a=a.groupsFn(c),h&&(a.fn=avg_fn(aFn(c))),executeRows(j,a,i,f,k,l,m,n),b=a=>e[a][f],fromGroups(d,e,b,g,f)},executeRowNumber=(c,f,g)=>{let h=len(c),d=0,e=-1,b,a;for(;++e<h;){for(b=c[e],a=-1;++a<b;)f[d+a][g]=a+1;d+=b}},executeRank=(g,c,h,i,m)=>{let n=len(g),d=0,j=-1,e,a,b,k,f,l;for(;++j<n;){for(e=g[j],a=0,l=1;a<e;)for(k=c[b=d+a][i],f=m?l++:a+1,c[b][h]=f,b=d+ ++a;a<e&&c[b][i]===k;)c[b][h]=f,b=d+ ++a;d+=e}},executePercentRank=(g,d,h,i)=>{let l=len(g),e=0,j=-1,c,a,b,k,f;for(;++j<l;){for(c=g[j],a=0;a<c;)for(k=d[b=e+a][i],f=a?a/(c-1):0,d[b][h]=f,b=e+ ++a;a<c&&d[b][i]===k;)d[b][h]=f,b=e+ ++a;e+=c}},executeCumeDist=(g,e,n,h)=>{let o=len(g),c=0,i=-1,b,a,d,j,k,f,l,m;for(;++i<o;){for(b=g[i],a=0;a<b;){for(j=e[d=c+a][h],f=a,d=c+ ++a;a<b&&e[d][h]===j;)d=c+ ++a;for(k=a/b,m=a-f,a=f,l=-1;a<b&& ++l<m;)e[c+a++][n]=k}c+=b}},executeNTile=(g,h,i,_,d)=>{let n=len(g),e=0,j=-1,c,a,k,l,f,b,m;for(;++j<n;){for(c=g[j],a=0,l=floor(c/d),f=c%d,b=0;b<d;){for(m=-1;++m<l;)h[k=e+a][i]=b+1,a++;f&&(f--,h[k=e+a][i]=b+1,a++),b++}e+=c}},executeLead=(e,f,j,g,k,l)=>{let m=len(e),h=0,i=-1,a,b,c,d;for(;++i<m;){for(a=e[i],b=-1;++b<a;)c=h+b,d=b+g,f[c][l]=d>=a||d<0?k:f[c+g][j];h+=a}},executeFirstValue=(d,e,j,f,k)=>{let l=len(d),b=0,g=-1,a,c,m,h,i;for(;++g<l;){for(a=d[g],h=(i=f<0?a-1:f)>=a?null:e[b+i][j],c=-1;++c<a;)e[m=b+c][k]=h;b+=a}},checkIntFB=a=>Number.isInteger(a)&&a>=0,checkFloatFB=a=>isNumber(a)&&a>=0,err1="invalid frame boundaries",more="more frame boundaries expected",less="less frame boundaries expected",gte="(>= 0)",checkUnBounded=(c,d,e,b)=>{let f=d?1:0,a=c[f++];if(isNumber(a)){let g=e?checkFloatFB:checkIntFB;g(a)||_throw(`${e?"number":"integer"} ${gte} expected (SELECT ${b})`),(a=c[f])&&(a.prec||a.fol)||_throw(`${err1} (SELECT ${b})`)}else a&&(a.cr||d&&a.uf)||_throw(`${err1} (SELECT ${b})`)},unBoundedFn=(d,e,f,g,h,j,k)=>{let b=!!d[0].up,i=b?1:0,a=d[i++];if(a.cr&&(a=0),isNumber(a)){let c=a;a=d[i],c>0&&a.prec&&(c=-c),j(e,f,g,h,b,!b,b?-1/0:c,b?c:1/0,k)}else executeUnordered(e,f,g,h)},checkB=(d,b,e,c)=>{let a=d[b++];if(isNumber(a)){let f=e?checkFloatFB:checkIntFB;f(a)||_throw(`${e?"number":"integer"} ${gte} expected (SELECT ${c})`),(a=d[b++])&&(a.prec||a.fol)||_throw(`${err1} (SELECT ${c})`)}else a&&a.cr?a=PRECEDING:_throw(`${err1} (SELECT ${c})`);return{next:a,ind:b}},checkBounded=(b,c,a)=>{let{next:d,ind:e}=checkB(b,0,c,a),{next:f,ind:g}=checkB(b,e,c,a);len(b)!==g&&_throw(`${err1} (SELECT ${a})`),d.fol&&f.prec&&_throw(`${err1} (SELECT ${a})`)},bFn=(d,c)=>{let b=d[c++],a=0;return isNumber(b)&&(a=b,b=d[c++],a>0&&b.prec&&(a=-a)),{num:a,ind:c}},boundedFn=(a,g,b,c,d,h,i)=>{let{num:e,ind:j}=bFn(a,0),{num:f}=bFn(a,j);e>f?exNulls(b,c,d):h(g,b,c,d,!0,!0,e,f,i)},isUnbounded=a=>null!=a[0]&&a[0].up||null!=last(a)&&last(a).uf,checkFrame=(e,c,b)=>{let a=e.frame_boundaries,d=len(a);d<2&&_throw(`more frame boundaries expected (SELECT ${b})`),d>4&&_throw(`less frame boundaries expected (SELECT ${b})`),isUnbounded(a)?checkUnBounded(a,a[0].up,c,b):checkBounded(a,c,b)},frameFn=(a,c,d,e,f,g)=>{let b=a.frame_boundaries,h=isUnbounded(b)?unBoundedFn:boundedFn;h(b,c,d,e,f,a.fn,g)},frameAbbr=(b,a,c)=>isNumber(a)?c&&c.prec?b(a,c,CURRENT_ROW):b(CURRENT_ROW,a,c):a&&a.up?b(a,CURRENT_ROW):b(CURRENT_ROW,a),checkSub=(d,e,h,a,f)=>{if(!isSubset(d,e)){let g=difference(d,e),b=intersect(g,h),c=len(b)?b[0]:g[0];isObject(a)?a=`SELECT ${a.ind}`:isArray(a)&&(a=`SELECT ${map(fnToAlias)(a).indexOf(c)+1}`),len(b)&&_throw(`column ${c} (${a}) ambiguous${f||""}`),_throw(`column ${c} (${a}) does not exist${f||""}`)}},stringCheck=(a,b)=>{isString(a)&&a||_throw(`string expected (${b})`)},strColsCheck=(a,b)=>{for(let c of(nul(a)&&_throw(`string expected (${b})`),a))stringCheck(c,b)},checkStr=(a,b)=>{"*"===a&&_throw(`asterisk (${b})`),isElem(".",a)&&_throw(`${a}: point character (${b})`),parseInt(a)+""===a&&_throw(`${a}: all digits (${b})`),(!col(a)||({})[a])&&_throw(`${a}: invalid name (${b})`)},strNulCheck=(b,a)=>{nul(b)&&(isArray(a)&&(a=`SELECT ${a.indexOf(b)+1}`),_throw(`empty string (${a})`))},checkColumnStr=(a,b)=>{strNulCheck(a,b),trim(a)!==a&&_throw(`${trim(a)}: leading/trailing space (${b})`),checkStr(a,b)},pgFn=a=>!(0===a||2===a||4===a),checkOrder=(g,h,e)=>{let b=[],f=g.columns,i=len(f),c=0,d=!1,a,j;for(;c<i;)a=f[c],d?isObject(a)?(h(j=a.ord_ind)&&_throw(`invalid option in ${e}`),d=!1):b.push(a):isString(a)?(b.push(a),d=!0):_throw(`invalid parameters (${e})`),c++;return b},order_fns=[a=>ascn(b=>b[a]),a=>descn(b=>b[a]),a=>ascn(b=>toLower(b[a])),a=>descn(b=>toLower(b[a])),a=>ascn_loc(b=>b[a]),a=>descn_loc(b=>b[a]),],orderbyFn=(i,c)=>{if(c&&nul(c))return[];let e=i.columns,b=[],f=len(e),a=0,d,h,g;for(;a<f;)d=e[a],g=!0,a+1<f&&(isObject(h=e[a+1])?(b.push(order_fns[h.ord_ind](d)),g=!1,a++):b.push(order_fns[0](d))),a++;return a===f&&g&&b.push(order_fns[0](d)),c?c.sort(cmp(b)):b},partitionFn=(d,b,c)=>{let a=orderbyFn(d),e=_eqs(map(a=>(b,c)=>0===a(b,c))(a));b&&(a=append(a,orderbyFn(b)));let f=cmp(a);return c.sort(f),_section(e,c)},checkOver=(c,l,m,b)=>{let n=c.WIN,p=n.clauses,o=c.framed,j=-1,d,f,e,a,g,h;for(let i of p)(d=i.over_ind)<j&&_throw(`OVER clauses: wrong order (SELECT ${b})`),d===j&&_throw(`OVER clauses: duplicates (SELECT ${b})`),0===d?f=i:1===d?e=i:2===d?a=i:_throw(`OVER clauses: invalid clause (SELECT ${b})`),j=d;if(f){let k=`PARTITION_BY ${b}`;g=checkOrder(f,pgFn,k),strColsCheck(g,k),checkSub(g,l,m,k)}e&&(h=checkOrderBy(e,l,m,b,c.med)),o?(e?(a||(a=RANGE_BETWEEN(UNBOUNDED_PRECEDING,CURRENT_ROW)),a.range&&1!==len(h)&&_throw(`1 column expected (ORDER_BY ${b})`)):(a||(a=ROWS_BETWEEN(UNBOUNDED_PRECEDING,UNBOUNDED_FOLLOWING)),a.range&&_throw(`ORDER_BY expected (SELECT ${b})`)),checkFrame(a,a.range,c.ind)):e?c.row_num||1===len(h)||_throw(`1 column expected (ORDER_BY ${c.wg?"WITHIN_GROUP ":""}${b})`):c.row_num||_throw(`ORDER_BY expected (${c.wg?"WITHIN_GROUP ":"SELECT "}${b})`),n.props={partitionby:f,orderby:e,frame:a,partColumns:g,ordColumns:h,framed:o}},overFn=(k,a,b,f)=>{let{partitionby:g,orderby:c,frame:h,ordColumns:i,framed:j}=k.props,d=g?partitionFn(g,c,a):(c&&orderbyFn(c,a),[len(a)]);if(c){if(j){if(h.range){let e=last(c.columns);isObject(e)&&(1===e.ord_ind||3===e.ord_ind||5===e.ord_ind)&&(b.desc=!0)}frameFn(h,d,b,a,f,last(i))}else b.fn(d,a,last(i))}else j?executeUnordered(d,b,a,f):b.fn(d,a)},checkProp=a=>(isString(a)?a=trim(a):isObject(a)&&(a.nested=!0),a),aggrWin=(a,b,c,d,e)=>({aggregate:!0,win:!0,WIN:a,AS:b,isFn:!0,winonly:!0,err:c,expr:d,prop:e}),_RN=(d,a,e,b,c)=>c?{fn(a){overFn(d,a,_RN(null,this.AS.alias_str,e,b))},AS:a}:{fn(a,c,d){e(a,c,this.AS,d,b)},dense_n:b,AS:a},gte_zero=a=>Number.isInteger(a)&&a>=0,gt_zero=a=>Number.isInteger(a)&&a>0,_AS=a=>last(a)&&last(a).alias?last(a):null,_err=(a,b,c)=>b<a?"more args expected":b>a?"too many args":c,_WIN=a=>{let b=a.findIndex(a=>a&&a.OVER),c=b> -1,d=c?a[b]:null;return{win:c,WIN:d}},RN=(a,d,e)=>{let b=1,c=_AS(a);c&&b++;let{WIN:f}=_WIN(a),g;d===executeNTile&&(gt_zero(e=a[0])||(g="integer (> 0) expected"),b++);let h=aggrWin(f,c,_err(b,len(a),g)),i=_RN(f,c,d,e,!0);return extend(h,i)},checkOffset=(a,b,h,c)=>{let e=1,f=null,d=h,g;return isObject(a)&&a.OVER?d=a:(gte_zero(a)?e=a:g="integer (>= 0) expected",c++,isObject(b)&&b.OVER?d=b:(f=b,c++)),{offset:e,def:f,WIN:d,err:g,num:c}},_LEAD_LAG=(a,d,e,f,b,c)=>c?{fn(b){overFn(f,b,_LEAD_LAG(a,d,e,null,this.AS.alias_str))},prop:a,AS:b}:{fn(b,c){executeLead(b,c,a,d,e,this.AS)},prop:a,AS:b},LEAD_LAG=(a,e)=>{let c=checkProp(a[0]),b=_AS(a),{offset:f,def:g,WIN:d,err:h,num:i}=checkOffset(a[1],a[2],a[3],b?3:2),j=aggrWin(d,b,_err(i,len(a),h),!0,c),k=_LEAD_LAG(c,e*f,g,d,b,!0);return extend(k,j)},_VALUE=(a,d,b,e,c)=>c?{fn(a){overFn(d,a,_VALUE(this.prop,null,this.AS.alias_str,e))},prop:a,AS:b}:{fn(a,c){executeFirstValue(a,c,this.prop,e,b)},prop:a,AS:b},VALUE=(a,b)=>{let c=2,e=checkProp(a[0]),d=_AS(a);d&&c++;let{WIN:f}=_WIN(a),g;b>0&&(gt_zero(b=a[1])||(g="integer (> 0) expected"),b--,c++);let h=aggrWin(f,d,_err(c,len(a),g),!0,e),i=_VALUE(e,f,d,b,!0);return extend(i,h)},percentileCont=(a,b,i,f)=>{let c=len(a);if(0===c)return null;let d=0;if(!i)return a[d+floor(1+f*(c-1))-1][b];let e=1+f*(c-1),g=floor(e),j=ceil(e),h=a[d+g-1][b],k=a[d+j-1][b];return h+(k-h)*(e-g)},filterRange=(b,e,f,c)=>{let d=[],g=b+e,a=b;for(;a<g;)null!=c[a][f]&&d.push(c[a]),a++;return d},exPWin=(d,e,j,f,k,l)=>{let m=len(d),a=0,g=-1,b,c,n,h,i;for(;++g<m;){for(i=filterRange(a,b=d[g],f,e),h=percentileCont(i,f,l,k),c=-1;++c<b;)e[n=a+c][j]=h;a+=b}},_PERCENTILE=(a,e,b,c,f,d)=>d?{fn(a){overFn(b,a,_PERCENTILE(this.prop,e,null,this.AS.alias_str,f))},prop:a,AS:c}:{fn(b,a,g,h){if(isArray(b)){exPWin(b,a,c,this.prop,e,f);return}a=orderbyFn(this.orderby,filterRange(g,h,this.prop,a));let d=percentileCont(a,this.prop,f,e);return this.AS?b[this.AS.alias_str]=d:d},prop:a,AS:b},PERCENTILE=(a,h,e,i)=>{let c=2,f=_AS(a);f&&c++;let{win:d,WIN:j}=_WIN(a);d&&c++;let g=a.findIndex(a=>a&&a.wg),k=g> -1?a[g]:null,b=a[0];return isNumber(b)&&b>=0&&b<=1||(e="number (0 <= n <= 1) expected"),{aggregate:!0,win:d,aggr:!d,WIN:j,wg:!0,WG:k,AS:f,med:i,framed:!1,expr:!1,isFn:!0,err:_err(c,len(a),e),params:{n:b,cont:h}}},median=a=>{let b=a[0],c=[.5,WITHIN_GROUP(ORDER_BY(isString(b)?trim(b):b))],d=1,{win:f,WIN:g}=_WIN(a);f&&(c.push(g),d++);let e=_AS(a);return e&&(c.push(e),d++),PERCENTILE(c,!0,_err(d,len(a),null),!0)},aggr=(b,g)=>{let d=1,c=_AS(b);c&&d++;let{win:a,WIN:e}=_WIN(b);a&&d++;let h=_err(d,len(b),null),f=checkProp(b[0]),i={aggregate:!0,win:a,aggr:!a,WIN:e,prop:f,AS:c,framed:!0,expr:!0,isFn:!0,err:h},j=g(f,a?e:c,c,a);return Object.assign(i,j)},uniq=(f,c,b,g)=>{let d=[],e=new Set,h=b+g,a;for(;b<h;)a=f[b++],e.has(c(a))||(e.add(c(a)),d.push(a));return d},aggrDist=(a,f)=>{let b=1,c=_AS(a);c&&b++;let d=_err(b,len(a),null),e=checkProp(a[0]);return{aggregate:!0,win:!1,aggr:!0,prop:e,AS:c,expr:!0,isFn:!0,err:d,fn:(b,a,d,g)=>(a=uniq(a,aFn(e),d,g),f(e,c).fn(b,a,0,len(a)))}},svc=":",_take=a=>_slice(a,1,-1),col=a=>!(":"===a[0]&&":"===a[len(a)-1]),scalarFn=a=>c=>{let d=a.nested?a.props:init(a.props),e=map(a=>isString(a)&&col(a)||isSymbol(a)?c[a]:isNumber(a)?a:isString(a)?_take(a):scalarFn(a)(c))(d),b=a.fn(...e);return a.nested?b:c[last(a.props).alias_str]=b},isSymbol=a=>"symbol"==typeof a,aFn=a=>isString(a)||isSymbol(a)?b=>b[a]:scalarFn(a),_count=(b,c,a,d)=>{if(1===d)return null==c(b[a])?0:1;let f=a+d,e=0;for(;a<f;)null!=c(b[a++])&&e++;return e},_COUNT=(a,b,c,d)=>d?{fn(a){overFn(b,a,_COUNT(this.prop),this.AS.alias_str)},prop:a,AS:c,count:!0}:{fn(c,d,e,a){let b="*"===this.prop?a:_count(d,aFn(this.prop),e,a);return this.AS?c[this.AS.alias_str]=b:b},fnP:(a,b)=>a+b,fnM:(a,b)=>a-b,count:!0,prop:a,AS:b},objP=(a,b)=>({sum:(a?a.sum:0)+(b?b.sum:0),count:(a?a.count:0)+(b?b.count:0)}),objM=(a,b)=>({sum:(a?a.sum:0)-(b?b.sum:0),count:(a?a.count:0)-(b?b.count:0)}),_sum=(e,f,a,g,h)=>{let i=a+g,b=0,c=0,d;for(;a<i;)null!=(d=f(e[a++]))&&(b+=d,c++);return h?{sum:b,count:c}:c?b:null},_SUM=(a,b,c,d)=>d?{fn(a){overFn(b,a,_SUM(this.prop),this.AS.alias_str)},prop:a,AS:c}:{fn(b,c,d,e){let a=_sum(c,aFn(this.prop),d,e,this&&this.fromWin);return this.AS?b[this.AS.alias_str]=a:a},fnP:(a,b)=>objP(a,b),fnM:(a,b)=>objM(a,b),sum:!0,prop:a,AS:b,groupsFn:_SUM},_avg=(e,f,b,g,h)=>{let i=b+g,c=0,a=0,d;for(;b<i;)null!=(d=f(e[b++]))&&(c+=d,a++);return h?{sum:c,count:a}:a?c/a:null},_AVG=(a,b,c,d)=>d?{fn(a){overFn(b,a,_AVG(this.prop),this.AS.alias_str)},prop:a,AS:c}:{fn(b,c,d,e){let a=_avg(c,aFn(this.prop),d,e,this&&this.fromWin);return this.AS?b[this.AS.alias_str]=a:a},fnP:(a,b)=>objP(a,b),fnM:(a,b)=>objM(a,b),avg:!0,prop:a,AS:b,groupsFn:_AVG},_min=(a,b)=>null!=a&&null!=b?b<a?b:a:null==a?b:a,_max=(a,b)=>null!=a&&null!=b?b>a?b:a:null==a?b:a,minmax=(b,c,a,e,f)=>{if(1===e)return c(b[a]);let g=a+e,d=c(b[a++]);for(;a<g;)d=f(c(b[a++]),d);return d},treeIns=(c,d,a,e,f)=>{let g=a+e,b;for(;a<g;)null!=(b=d(c[a]))&&f.insert(b),a++},treeRem=(c,d,a,e,f)=>{let g=a+e,b;for(;a<g;)null!=(b=d(c[a]))&&f.remove(b),a++},_MIN=(a,b,c,d)=>d?{fn(a){overFn(b,a,_MIN(this.prop),this.AS.alias_str)},prop:a,AS:c}:{fn(c,d,e,f,a,g){let h=a?g?treeRem:treeIns:minmax,b=h(d,aFn(this.prop),e,f,a||_min);return this.AS?c[this.AS.alias_str]=b:b},fnP:_min,min:!0,prop:a,AS:b,groupsFn:_MIN},_MAX=(a,b,c,d)=>d?{fn(a){overFn(b,a,_MAX(this.prop),this.AS.alias_str)},prop:a,AS:c}:{fn(c,d,e,f,a,g){let h=a?g?treeRem:treeIns:minmax,b=h(d,aFn(this.prop),e,f,a||_max);return this.AS?c[this.AS.alias_str]=b:b},fnP:_max,max:!0,prop:a,AS:b,groupsFn:_MAX},_section=(f,c)=>{let d=len(c),e=[],g=0,b=0,a;for(;b<d;){for(a=b+1;a<d&&f(c[b],c[a]);)a++;e[g++]=a-b,b=a}return e},_math=(b,f)=>{let d=len(b);if(!d)return 0;let c=0,a=b[c++];if(null==a)return null;let e;for(;c<d;){if(null==(e=b[c++]))return null;a=f(a,e)}return a},add=(...a)=>_math(a,(a,b)=>a+b),sub=(...a)=>_math(a,(a,b)=>a-b),mul=(...a)=>_math(a,(a,b)=>a*b),div=(...a)=>_math(a,(a,b)=>a/b),scalar=(b,a)=>({scalar:!0,fn:b,props:a=map(checkProp)(a),isFn:!0}),_len=a=>null==a[0]?null:a[0].length,_round=a=>null==a[0]?null:Math.round(a[0]),checkAliasString=(a,b)=>(isString(a)&&(a=trim(a)),stringCheck(a,`SELECT ${b} AS`),checkStr(a,`SELECT ${b} AS`),a),checkScalarAliases=c=>{let a=c.props;if(!nul(a)&&last(a).alias){let b=last(a).alias_str;return b=checkAliasString(b,c.ind),last(a).alias_str=b,b}_throw(`AS expected (SELECT ${c.ind})`)},checkAggregateAliases=a=>{if(a.AS&&a.AS.alias){let b=a.AS.alias_str;return b=checkAliasString(b,a.ind),a.AS.alias_str=b,b}_throw(`AS expected (SELECT ${a.ind})`)},_isAggr=a=>any(a=>isObject(a)&&(a.aggr||a.scalar&&_isAggr(a.props)))(a),isAggr=(a,b)=>any(a=>isString(a)&&isElem(a,b)||isObject(a)&&(a.aggr||a.scalar&&isAggr(a.props,b)))(a),isWin=(a,b)=>any(a=>isString(a)&&isElem(a,b)||isObject(a)&&(a.win||a.scalar&&isWin(a.props,b)))(a),checkScalar=(a,c,d,e)=>{let b=init(a.props);if(isWin(b,d)){a.win=!0,d.push(e),_isAggr(b)&&(a.winaggr=!0);return}if(isAggr(b,c)){a.aggr=!0,c.push(e);return}a.scal=!0},checkAliases=f=>{let d=[],e=[],b;for(let a of f)if(a.scalar)b=checkScalarAliases(a),checkScalar(a,d,e,b);else if(b=checkAggregateAliases(a),a.win){e.push(b);let c=a.prop;isObject(c)&&(c.aggr||c.scalar&&_isAggr(c.props))&&(a.winaggr=!0)}else d.push(b);return{aa:d,wa:e}},_checkProp=(a,b)=>{(isString(a)?nul(a):!(isObject(a)&&a.isFn))&&_throw(`invalid parameter (SELECT ${b})`)},checkParams=(c,b)=>{for(let a of(nul(c)&&_throw(`parameters expected (SELECT ${b})`),c))(isString(a)?!nul(a):isObject(a)?a.isFn:isNumber(a))||(isObject(a)&&a.alias&&_throw(`nested AS (SELECT ${b})`),_throw(`invalid parameter (SELECT ${b})`))},checkWG=a=>{a.WG&&1===a.WG.wg_ind||_throw(`WITHIN_GROUP expected (SELECT ${a.ind})`),a.WG.orderby&&0===a.WG.orderby.wg_ind||_throw(`ORDER_BY expected (WITHIN_GROUP SELECT ${a.ind})`),a.aggr&&(a.orderby=a.WG.orderby),a.WIN=OVER(...a.win?a.WIN.clauses:[],a.WG.orderby)},appendObj=a=>{a.prop=a.WIN.props.ordColumns[0];let b=_PERCENTILE(a.prop,a.params.n,a.win?a.WIN:a.AS,a.AS,a.params.cont,a.win);Object.assign(a,b)},checkAggregateFn=(a,c,d,b)=>{a.nested&&a.AS&&_throw(`nested AS (SELECT ${b})`),a.winonly&&!(a.WIN&&a.WIN.OVER)&&_throw(`OVER expected (SELECT ${b})`),a.wg&&checkWG(a),a.err&&_throw(`${a.err} (SELECT ${b})`),a.expr&&_checkProp(a.prop,b),(a.win||a.wg)&&checkOver(a,c,d,b),a.wg&&appendObj(a)},isNested=(c,a,b)=>isElem(a,b.wa)||c&&isElem(a,b.aa),scalInd=0,startInd=1,restInd=2,overInd=3,checkNesting=(a,b,h,i,c,f)=>{let g=[[],[],[],[]];if(a.aggregate){(0===b||a.win&&2===b)&&_throw(`nesting error (SELECT ${c})`),b=a.aggr?0:2,checkAggregateFn(a,h,i,c);let d=a.prop;if(a.win){let j=a.WIN.props.partColumns,k=a.WIN.props.ordColumns;j&&g[3].push(...j),k&&g[3].push(...k)}if(isString(d)&&!(a.count&&"*"===d))isNested(a.aggr,d,f)&&_throw(`nesting error (SELECT ${c+" "+d})`),g[b].push(d);else if(isObject(d)){let m=checkNesting(d,b,h,i,c,f);each((a,b)=>g[b].push(...a))(m)}}else{let l=a.nested?a.props:init(a.props);for(let e of(checkParams(l,c),l))if(isString(e)&&col(e))f&&1!==b&&isNested(0===b,e,f)&&_throw(`nesting error (SELECT ${c+" "+e})`),g[b].push(e);else if(isObject(e)){let n=checkNesting(e,b,h,i,c,f);each((a,b)=>g[b].push(...a))(n)}}return g},aliasFn=a=>(a.aggregate?a.AS:last(a.props)).alias_str,checkScal=(h,d,e)=>{let f=[],g=[],b,c;for(let a of h)c=checkNesting(a,0,null,e,a.ind,null),checkSub(c[0],d,e,a),b=aliasFn(a),d.push(b),g.push(b),f.push(...c[0]);return{scal_names:f,sa:g}},checkAggr=(h,d,e,f,i)=>{let g=[],c=[],a;for(let b of h)a=checkNesting(b,1,d,e,b.ind,i),checkSub(a[0],d,e,b),checkSub(a[1],append(c,f),[],b),c.push(aliasFn(b)),g.push(...a[0],...a[1]);return{aggr_names:g,aa:c,input:append(f,c)}},checkWin=(h,c,i,d,f,j)=>{let g=[],e=[],a;for(let b of h)a=checkNesting(b,1,c,d,b.ind,j),checkSub(a[0],i,d,b),checkSub(a[1],append(c,e),f?[]:d,b),checkSub(a[2],c,f?[]:d,b),e.push(aliasFn(b)),g.push(...a[0],...a[1],...a[2],...a[3]);return c.push(...e),{win_names:g,wa:e}},checkOrderBy=(d,e,f,c,g)=>{let a=`${g?"SELECT":"ORDER_BY"}${c?" "+c:""}`,b=checkOrder(d,a=>a<0||a>5,a);return strColsCheck(b,a),checkSub(b,e,f,a),b},executeScalars=(a,b)=>{let c=map(scalarFn)(b);for(let d of a)for(let e of c)e(d)},whereFn=(a,b)=>filter(a.pred)(b),groupbyFn=(b,a)=>nul(a)?[]:partitionFn(b,null,a),scalarAggrFn=(a,c,f,g,h)=>{let d=a.nested?a.props:init(a.props),e=map(a=>isString(a)&&col(a)?c[a]:isNumber(a)?a:isString(a)?_take(a):a.aggregate?a.fn(c,f,g,h):scalarAggrFn(a,c,f,g,h))(d),b=a.fn(...e);return a.nested?b:c[last(a.props).alias_str]=b},_scalarAggrFn=a=>(b,c,d,e)=>scalarAggrFn(a,b,c,d,e),waFn=b=>{let a=b.prop,c=Symbol(),d={alias_str:c};return b.prop=c,a.aggr?(a.AS=d,a.fn.bind(a)):(a.props.push(d),a.nested=!1,_scalarAggrFn(a))},scalWaFn=a=>{let b=map((a,d,e)=>{if(isObject(a)&&a.isFn){if(a.win&&!isString(a.prop))return waFn(a);if(a.aggr){let b=a,c=Symbol(),f={alias_str:c};return e[d]=c,b.AS=f,b.fn.bind(b)}if(a.scalar)return scalWaFn(a)}return a})(a.props);return(a,c,d,e)=>{each(b=>isFunction(b)?b(a,c,d,e):b)(b)}},executeAggregates=(d,h,e)=>{let a=len(d),b=Array(a),c=-1;for(;++c<a;)b[c]={};let f=c=>{let i=isString(c)?(a,b,d)=>a[c]=b[d][c]:c.aggregate?c.aggr?c.fn.bind(c):waFn(c):c.aggr?_scalarAggrFn(c):scalWaFn(c),g=0,e=-1,f;for(;++e<a;)f=d[e],i(b[e],h,g,f),g+=f};for(let g of e)f(g);return b},scalarWinFn=(a,b)=>{a.props=map(a=>{if(a.aggregate&&a.win){let c=Symbol();a.AS={alias_str:c},a.fn(b),a=c}else a.scalar&&scalarWinFn(a,b);return a})(a.props)},executeWins=(b,d)=>{let c=[];for(let a of d)a.aggregate?a.fn(b):(scalarWinFn(a,b),c.push(a));nul(c)||executeScalars(b,c)},fnToAlias=a=>isString(a)?a:aliasFn(a),getDistinct=(a,b)=>{let c=cmp(map(a=>ascn(b=>b[a]))(a)),d=_eqs(map(a=>equalBy(b=>b[a]))(a));return b.sort(c),nubSBy(d,b)},checkStr1=(b,a,c)=>{a&&b[a]&&!isString(b[a])&&_throw(`Column ${a} (FROM ${c}) ambiguous!`)},mergeObjs=(e,f,j,k,l,m,a,n)=>{let h=e[j],b=e[k],c={};if(m)h[e[a]]=a,b[a]||(b[a]=e[a]),h[f[a]]=a,delete f[a];else for(let o of keys(b))b[o]=1;checkStr1(b,a,n);let d;for(let g of keys(e))d=e[g],f[g]&&!h[d]?(c[d]=g,b[g]=d):c[g]=d;for(let i of keys(f))d=f[i],b[i]?c[d]=i:c[i]=d;return c[j]=h,c[k]=b,c[l]=e[l],c},checkCrossJoin=(a,c,d,e,b)=>a[b]||c[b]?(a[b]=!0,a):mergeObjs(a,c,d,e,b),checkJoin=(a,b,c,j,f,g,k,l,h,e,d)=>{if(a[d]||b[d]){if(f.anti){if(f.left){if(b[d])return a}else if(a[d])return b[h]={},b[e]={},b}return a[d]=!0,a}let i=l?"USING ":"ON ";return(stringCheck(c,`FROM ${i+g}`),stringCheck(j,`FROM ${i+k}`),a[c]||a[h][c]||checkSub([c],keys(a),keys(a[e]),`FROM ${i+g}`),b[j]||checkSub([j],keys(b),[],`FROM ${i+k}`),f.semi)?(checkStr1(a[e],c,g),f.left?a:(b[h]={},b[e]={},b)):mergeObjs(a,b,h,e,d,l,c,g)},checkTNUniqness=b=>{if(!isUniq(b)){let c=new Set,d,e=0;for(let a of b){if(c.has(a)){d=a;break}c.add(a),e++}_throw(`table name ${d} (FROM ${"table "+e+"1"}) already exists`)}},checkNext=(g,d,b,c,h)=>{let e=c+1,a="t"+(len(b)+1),f;if(e<h&&isString(f=g[e])&&(a=trim(f),strNulCheck(a,"FROM table-name"),c++),b.push(a),checkTNUniqness(b),!nul(d))for(let i of keys(d[0]))checkColumnStr(i,a+" column");return c},copyObj=a=>Object.assign({},a),_throwErr=(d,e,c)=>{let a="FROM: ",b=`after ${e} `;d&&(isArray(c)&&_throw(a+b+"ON/USING expected"),_throw(a+"after JOIN "+b+"table expected")),_throw(a+(isArray(c)?"":"after ON/USING ")+b+"table or JOIN expected")},checkJoinTables=h=>{let n=len(h),k=[],o=[],l=[],g=Symbol(),m=Symbol(),i=Symbol(),q=(b,a)=>mapKeys(a=>b+a,keys(a[0]||{})),e=0,r=0,p="",c,a,j,f,d,b=h[e];for(isArray(b)||_throw("FROM: table expected as first parameter"),e=checkNext(h,b,k,e,n),d=k[r++],a=q(d+".",b),o.push(copyObj(a)),a[g]={},a[m]={},a[i]=nul(b),l.push([null,extend(a,a[g])]),f=b,e++;e<n;)isArray(b=h[e])?(c&&isArray(f)&&_throwErr(c,d,f),e=checkNext(h,b,k,e,n),p+=(p?" + ":"")+d,j=q((d=k[r++])+".",b),o.push(copyObj(j)),j[i]=nul(b),(!c||c.cross)&&(a=checkCrossJoin(a,j,g,m,i),l.push([null,extend(a,a[g])]),c=null)):isObject(b)&&(b.join||b.ON)?b.join?(c&&_throwErr(c,d,f),c=b):(c&&isArray(f)||_throwErr(c,d,f),a=checkJoin(a,j,b.str1,b.str2,c,p,d,b.using,g,m,i),l.push([b.str1,extend(a,a[g])]),c=null):_throwErr(c,d,f),f=b,e++;c&&_throwErr(c,d,f);let s=keys(extend(a,a[g]));return{empty:a[i],tres:keys(a),tkeys:s,ambs:keys(a[m]),inputs:o,temps:l}},zip=(a,b)=>a.map((a,c)=>[a,b[c]]),pick2Fns=(a,b,c)=>a.simple&&b.simple?pick2(a.targets,b.targets,c):a.simple?pick2KTS(a.targets,zip(b.targets,b.sources),c):b.simple?pick2TSK(zip(a.targets,a.sources),b.targets,c):pick2TS(zip(a.targets,a.sources),zip(b.targets,b.sources),c),invert=a=>{let b={};for(let c of keys(a))b[a[c]]=c;return b},joinFn=(e,d,f,a,b)=>{if(b>len(a)-1)return{table:d};let g=a[b][1],n=invert(e),o=invert(g),h=map(a=>a[0])(drop(b,a)),i=_uniq(append(f,h)),j=a=>e[a]&&e[a]===g[a]||a===e[g[a]]||n[a]&&o[a],k=filter(j)(i),c=map(a=>g[a]?a:o[a])(k),l=map(a=>e[a]&&g[a]?a:g[a])(c),m=all((a,b)=>a===l[b])(c);return{targets:c,sources:l,simple:m,table:d}},executeJoin=(b,c,f,i,a,j,k,g,h)=>{let l=g[h][1],e;if(a.semi){let d=a.left?b:c;e=d.simple?_pick(d.targets):pickTS(zip(d.targets,d.sources))}else e=pick2Fns(b,c,j&&a.fnplus?a.fnplus(f):null);let m=a.fn({fn:e,t1:b.table,t2:c.table,str1:f,str2:i,tgs1:b.targets,tgs2:c.targets});return joinFn(l,m,k,g,h+1)},checkNextInd=(b,a,c)=>a+1<c&&isString(b[a+1])?a+1:a,_uniq=a=>[...new Set(a)],joinTables=(f,g,i,h)=>{let j=len(f),b=0,k=0,c=1,a=f[0],d,e,l;if(1===len(h))return _select(intersect(keys(i[k]),g))(a);for(b=checkNextInd(f,b,j),e=joinFn(i[k++],a,g,h,c),b++;b<j;)isArray(a=f[b])?(b=checkNextInd(f,b,j),l=joinFn(i[k++],a,g,h,c,!1),(!d||d.cross)&&(e=executeJoin(e,l,null,null,{fn:_prodSQL},!1,g,h,c),d=null,c++)):a.join?d=a:(e=executeJoin(e,l,a.str1,a.str2,d,a.using,g,h,c),d=null,c++),b++;return e.table},checkGroupBy=(c,d,e,f,g,h)=>{let b="GROUP_BY",a=checkOrder(c,pgFn,b);return strColsCheck(a,b),checkSub(a,f,g,b),checkSub(append(d,e),a,[],h," in GROUP_BY"),a},checkWhere=(d,g,h,a)=>{isFunction(d.pred)||_throw(`predicate expected (${a})`);let c=d.pred+"",i=c.match(/[=(]/)[0],e=c.match("="===i?/\b\w+\b/:/(?<=\(\s*)\b\w+\b/);e||_throw(`parameter expected in predicate of ${a}`);let f="(?<=\\b"+e[0]+"\\s*",j=f+"\\.\\s*)\\w+\\b",k="\\[\\s*['\"`])",l="(?=['\"`]\\s*\\])",m=f+k+"[^'\"`]*"+l,b=c.match(new RegExp(j+"|"+m,"g"))||[];for(let n of b=trimCols(b))strNulCheck(n,a);return checkSub(b,g,h,a),b},checkUniqness=c=>{let d=map(fnToAlias)(c);if(!isUniq(d)){let e=new Set,f,a=0;for(let b of d){if(e.has(b)){f=b;break}e.add(b),a++}_throw(`column ${f} (SELECT ${a+1}${isString(c[a])?"":" AS"}) already exists`)}},checkNotSub=(b,e)=>{let c=filter(a=>!isString(a))(e),f=map(fnToAlias)(c);if(!nul(intersect(f,b))){let g=new Set(b),a;for(let d of c)if(g.has(fnToAlias(d))){a=d;break}_throw(`column ${fnToAlias(a)} (SELECT ${a.ind} AS) already exists [in table]`)}},checkSelects=(b,c,d,a,e)=>{if(e)for(let f of b)strNulCheck(f,a);checkUniqness(a),checkNotSub(append(c,d),a),e&&checkSub(b,c,d,a)},_selectSQL=(q,W,X,Y)=>{let h=q.findIndex(a=>!(isString(a)||a.isFn));h<1&&(h> -1&&_throw("no column selected"),h=len(q));let l=take(h,q),Z=drop(h,q),x=-1,d,y,m,e,i,n;for(let j of Z)(d=j.select_ind)<x&&_throw("SELECT clauses: wrong order"),d===x&&_throw("SELECT clauses: duplicates"),0===d?y=j:1===d?m=j:2===d?e=j:3===d?i=j:4===d?n=j:_throw("SELECT clauses: invalid clause"),x=d;y||_throw("FROM must be supplied");let K=y.tables,z,A=1,L=[];for(let o of l)isString(o)||(isObject(o)&&o.isFn||_throw(`invalid argument (SELECT ${A})`),o.ind=A,z=!0,L.push(o)),A++;let B;z&&(B=checkAliases(L));let r,s,t,C,p,f=[],D=[],E=[],F=[],M=[];for(let c of l)isString(c)?(r=!0,f.push(trim(c))):c.scal?(s=!0,D.push(c)):c.aggr?(t=!0,E.push(c)):(C=!0,F.push(c),c.winaggr&&(p=!0,M.push(c)));let u;1===h&&r&&"*"===f[0]&&(u=!0),(r||s)&&(t||p)&&!e&&_throw("GROUP_BY required"),i&&!e&&_throw("GROUP_BY required [before HAVING]");let{empty:$,tres:N,tkeys:O,ambs:g,inputs:aa,temps:ab}=checkJoinTables(K);if($)return[];u||checkSelects(f,O,g,l,r);let b=copy(O),P=[],G=[],Q=[],H=[],R=[],S=[],I=[],v=[],T=[],J=[];m&&(P=checkWhere(m,b,g,"WHERE")),s&&({scal_names:R,sa:v}=checkScal(D,b,g));let ac=copy(b);u&&(f=N);let k=e||t;if(k){if(e){let ad=u?N:l;G=checkGroupBy(e,f,v,b,g,ad)}({aggr_names:S,aa:T,input:b}=checkAggr(E,b,g,G,B)),i&&(Q=checkWhere(i,b,[],"HAVING"))}let w=k||p;b=p&&!k?[]:b,C&&({win_names:I,wa:J}=checkWin(F,b,ac,g,w,B)),n&&(H=checkOrderBy(n,b,w?[]:g));let ae=k?S:I,af=concat(f,R,ae,G,P,k?[]:H),ag=append(v,k?T:J),ah=difference(af,ag),a=joinTables(K,ah,aa,ab);if(m&&(a=whereFn(m,a)),s&&executeScalars(a,D),w){let U=difference(concat(f,v,Q,I,H),J),ai=t||p?concat(U,E,M):U,aj=e?groupbyFn(e,a):[len(a)];a=executeAggregates(aj,a,ai),i&&(a=whereFn(i,a))}C&&executeWins(a,F);let V=z?map(fnToAlias)(l):f;return w||!W||nul(a)||(a=getDistinct(V,a)),n&&orderbyFn(n,a),X&&(a=take(Y,a)),select(V)(a)},trimCols=a=>map(a=>isString(a)?trim(a):a)(a),fulljoinFn=a=>(c,d,b)=>{null==d[a]&&(c[a]=null==b[a]?null:b[a])},rightjoinFn=a=>(c,_,b)=>{c[a]=null==b[a]?null:b[a]};export const JOIN={join:!0,fn:hashjoin};export const INNER_JOIN={join:!0,fn:hashjoin};export const CROSS_JOIN={join:!0,cross:!0};export const LEFT_JOIN={join:!0,fn:leftjoin};export const RIGHT_JOIN={join:!0,fn:rightjoin,fnplus:rightjoinFn};export const FULL_JOIN={join:!0,fn:fulljoin,fnplus:fulljoinFn};export const LEFT_SEMI_JOIN={join:!0,semi:!0,left:!0,fn:leftsemijoin};export const RIGHT_SEMI_JOIN={join:!0,semi:!0,fn:rightsemijoin};export const LEFT_ANTI_JOIN={join:!0,semi:!0,left:!0,anti:!0,fn:leftantijoin};export const RIGHT_ANTI_JOIN={join:!0,semi:!0,anti:!0,fn:rightantijoin};export const ON=(a,b)=>(isString(a)&&(a=trim(a)),isString(b)&&(b=trim(b)),{ON:!0,str1:a,str2:b});export const USING=a=>(isString(a)&&(a=trim(a)),{ON:!0,str1:a,str2:a,using:!0});export const UNBOUNDED_PRECEDING={up:!0};export const PRECEDING={prec:!0};export const CURRENT_ROW={cr:!0};export const FOLLOWING={fol:!0};export const UNBOUNDED_FOLLOWING={uf:!0};export const ROWS_BETWEEN=(...a)=>({frame_boundaries:a,over_ind:2,rows:!0,fn:executeRows});export const RANGE_BETWEEN=(...a)=>({frame_boundaries:a,over_ind:2,range:!0,fn:executeRange});export const GROUPS_BETWEEN=(...a)=>({frame_boundaries:a,over_ind:2,groups:!0,fn:executeGroups});export const ROWS=(a,b)=>frameAbbr(ROWS_BETWEEN,a,b);export const RANGE=(a,b)=>frameAbbr(RANGE_BETWEEN,a,b);export const GROUPS=(a,b)=>frameAbbr(GROUPS_BETWEEN,a,b);export const PARTITION_BY=(...a)=>(a=trimCols(a),{columns:a,over_ind:0});export const OVER=(...a)=>({clauses:a,OVER:!0});export const ROW_NUMBER=(...b)=>{let a=RN(b,executeRowNumber);return a.row_num=!0,a};export const RANK=(...a)=>RN(a,executeRank);export const DENSE_RANK=(...a)=>RN(a,executeRank,!0);export const PERCENT_RANK=(...a)=>RN(a,executePercentRank);export const CUME_DIST=(...a)=>RN(a,executeCumeDist);export const NTILE=(...a)=>RN(a,executeNTile);export const LEAD=(...a)=>LEAD_LAG(a,1);export const LAG=(...a)=>LEAD_LAG(a,-1);export const FIRST_VALUE=(...a)=>VALUE(a,0);export const LAST_VALUE=(...a)=>VALUE(a,-1);export const NTH_VALUE=(...a)=>VALUE(a,1);export const WITHIN_GROUP=a=>({orderby:a,wg:!0,wg_ind:1});export const PERCENTILE_CONT=(...a)=>PERCENTILE(a,!0);export const MEDIAN=(...a)=>median(a);export const PERCENTILE_DISC=(...a)=>PERCENTILE(a);export const COUNT=(...a)=>aggr(a,_COUNT);export const SUM=(...a)=>aggr(a,_SUM);export const AVG=(...a)=>aggr(a,_AVG);export const MIN=(...a)=>aggr(a,_MIN);export const MAX=(...a)=>aggr(a,_MAX);export const COUNT_DISTINCT=(...a)=>aggrDist(a,_COUNT);export const SUM_DISTINCT=(...a)=>aggrDist(a,_SUM);export const AVG_DISTINCT=(...a)=>aggrDist(a,_AVG);export const AS=a=>({alias:!0,alias_str:a});export const ID=(...a)=>scalar(a=>a,a);export const LEN=(...a)=>scalar(_len,a);export const ROUND=(...a)=>scalar(_round,a);export const ADD=(...a)=>scalar(add,a);export const SUB=(...a)=>scalar(sub,a);export const DIV=(...a)=>scalar(div,a);export const MUL=(...a)=>scalar(mul,a);export const FROM=(...a)=>({tables:a,select_ind:0});export const WHERE=a=>({pred:a,select_ind:1});export const GROUP_BY=(...a)=>(a=trimCols(a),{columns:a,select_ind:2});export const HAVING=a=>({pred:a,select_ind:3});export const ASC={ord_ind:0};export const DESC={ord_ind:1};export const NOCASE_ASC={ord_ind:2};export const NOCASE_DESC={ord_ind:3};export const ASC_LOC={ord_ind:4};export const DESC_LOC={ord_ind:5};export const ORDER_BY=(...a)=>(a=trimCols(a),{columns:a,select_ind:4,over_ind:1,wg_ind:0});export const SELECT=(...a)=>_selectSQL(a);export const SELECT_TOP=a=>(...b)=>_selectSQL(b,!1,!0,a);export const SELECT_DISTINCT=(...a)=>_selectSQL(a,!0);export const SELECT_DISTINCT_TOP=a=>(...b)=>_selectSQL(b,!0,!0,a);export const createFn=a=>(...b)=>scalar(a,b)